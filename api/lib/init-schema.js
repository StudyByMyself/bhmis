// Generated by CoffeeScript 1.7.1
(function() {
  var buildSchema, createSchema, scanSchema, updateSchema, _Log, _async, _fs, _knex, _path;

  _fs = require('fs');

  _path = require('path');

  _async = require('async');

  _knex = require('./db-connection').getConnection();

  _Log = require('log4slow');

  scanSchema = function(dir) {
    var file, filePath, files, queue, _i, _len;
    if (dir == null) {
      dir = 'schema';
    }
    dir = _path.join(__dirname, dir);
    files = _fs.readdirSync(dir);
    queue = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      filePath = _path.join(dir, file);
      if (_fs.statSync(filePath).isFile()) {
        queue.push(require(filePath));
      }
    }
    return queue;
  };

  createSchema = function(name, fields) {
    return _knex.schema.createTable(name, function(table) {
      var key, value;
      _Log.info("创建表 " + name + " 成功！");
      table.increments('id').primary();
      for (key in fields) {
        value = fields[key];
        table[value](key);
      }
      return table.bigInteger('timestamp');
    });
  };

  updateSchema = function(name, fields) {
    var dbTable, key, queue, value;
    _Log.info("--- update table " + name + " begin...");
    queue = [];
    for (key in fields) {
      value = fields[key];
      queue.push({
        key: key,
        value: value
      });
    }
    dbTable = _knex.schema.table;
    return _async.whilst(function() {
      return queue.length;
    }, function(cb) {
      var column;
      column = queue.pop();
      return _knex.schema.hasColumn(name, column.key).then(function(exists) {
        if (exists) {
          return cb();
        }
        return dbTable(name, function(table) {
          table[column.value](column.key);
          _Log.info("update " + column.key + " success");
          return cb();
        });
      });
    }, function(err) {
      return _Log.info("--- update table " + name + " finish.");
    });
  };

  buildSchema = function(schema) {
    var fields, name;
    name = schema.name;
    fields = schema.fields;
    return _knex.schema.hasTable(name).then(function(exists) {
      if (exists) {
        return updateSchema(name, fields);
      } else {
        return createSchema(name, fields);
      }
    });
  };

  exports.init = function() {
    var schema, schemas, _i, _len, _results;
    schemas = scanSchema();
    _results = [];
    for (_i = 0, _len = schemas.length; _i < _len; _i++) {
      schema = schemas[_i];
      _results.push(buildSchema(schema));
    }
    return _results;
  };

}).call(this);
