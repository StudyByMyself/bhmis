// Generated by CoffeeScript 1.7.1
(function() {
  var Events, _Base, _entity,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _entity = require('../entity/events');

  _Base = require('./base');

  Events = (function(_super) {
    __extends(Events, _super);

    function Events() {
      Events.__super__.constructor.apply(this, arguments);
    }

    Events.prototype.add = function(req, resp) {
      var callback, data, self;
      self = this;
      data = req.client.query;
      callback = data.callback;
      self.clearData(data);
      console.log(data);
      return _entity.saveOnlyOne(data, function(error) {
        var result, status;
        status = error ? false : true;
        result = {
          status: status
        };
        return self.sendResult(resp, result, callback);
      });
    };

    Events.prototype.list = function(req, resp) {
      var callback, data, self;
      self = this;
      data = req.client.query;
      callback = data.callback;
      self.clearData(data);
      return _entity.findSupport(data).then(function(rows) {
        var queue, row, _i, _len;
        queue = [];
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          row = rows[_i];
          queue.push(row.support);
        }
        return self.sendResult(resp, queue, callback);
      });
    };

    Events.prototype.deviceList = function(req, resp) {
      var callback, data, self;
      self = this;
      data = req.client.query;
      callback = data.callback;
      return _entity.findDeviceList().then(function(rows) {
        var queue, row, _i, _len;
        queue = [];
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          row = rows[_i];
          queue.push(row.device);
        }
        return self.sendResult(resp, queue, callback);
      });
    };

    Events.prototype.browserList = function(req, resp) {
      var callback, data, device, self;
      self = this;
      data = req.client.query;
      callback = data.callback;
      device = data.device;
      return _entity.findBrowserListByDevice(device).then(function(rows) {
        var queue, row, _i, _len;
        queue = [];
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          row = rows[_i];
          queue.push(row.browser);
        }
        return self.sendResult(resp, queue, callback);
      });
    };

    return Events;

  })(_Base);

  module.exports = new Events();

}).call(this);
