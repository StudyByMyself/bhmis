// Generated by CoffeeScript 1.7.1
(function() {
  var clearData, sendResult, _entity;

  _entity = require('../entity/device');

  sendResult = function(resp, data, isCallBack) {
    if (isCallBack == null) {
      isCallBack = false;
    }
    if (isCallBack) {
      return resp.end("" + isCallBack + "(" + (JSON.stringify(data)) + ")");
    }
    return resp.end(JSON.stringify(data));
  };

  clearData = function(data) {
    delete data.callback;
    return delete data._;
  };

  exports.add = function(req, resp) {
    var callback, data;
    data = req.client.query;
    callback = data.callback;
    clearData(data);
    return _entity.find(data).then(function(rows) {
      var reslut;
      if (rows.length === 0) {
        _entity.save(data).then(function(ids) {
          var result;
          result = {
            status: true,
            ids: ids
          };
          return sendResult(resp, result, callback);
        });
      }
      reslut = {
        status: true
      };
      if (rows.length) {
        return sendResult(resp, reslut, callback);
      }
    })["catch"](function(error) {
      var result;
      result = {
        status: false
      };
      return sendResult(resp, result, callback);
    });
  };

  exports.fields = function(req, resp) {
    var callback, data, fields;
    data = req.client.query;
    callback = data.callback;
    fields = _entity.getSchemaFields();
    return sendResult(resp, fields, callback);
  };

  exports.distinctFields = function(req, resp) {
    var data, field;
    data = req.client.query || {};
    field = data.field || '';
    return _entity.getDistinctValue(field).then(function(raws) {
      return sendResult(resp, raws, data.callback);
    });
  };

  exports.list = function(req, resp) {
    var callback, data;
    data = req.client.query;
    callback = data.callback;
    clearData(data);
    return _entity.find(data).then(function(raws) {
      return sendResult(resp, raws, callback);
    });
  };

}).call(this);
